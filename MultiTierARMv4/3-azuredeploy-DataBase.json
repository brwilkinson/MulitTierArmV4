{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    // Global
    "DeploymentID": {
      "type": "string",
      "defaultValue": "101",
      "minLength": 2
    },
    "Prefix": {
      "type": "string",
      "defaultValue": "MSFT",
      "minLength": 1
    },
    "Environment": {
      "type": "string",
      "defaultValue": "Dev",
      "allowedValues": [
        "Dev",
        "Test",
        "Prod"
      ]
    },
    "vmStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ]
    },
    // Used for all VM's
    "vmAdminUserName": {
      "type": "string",
      "defaultValue": "brw",
      "minLength": 3
    },
    // Used for all VM's, local and Domain Admin Password
    "vmAdminPassword": {
      "type": "securestring"
    },
    "vmDomainName": {
      "type": "string",
      "defaultValue": "Contoso.com",
      "allowedValues": [
        "Contoso.com",
        "AlpineSkiHouse.com",
        "Fabrikam.com",
        "TreyResearch.net"
      ],
      "metadata": {
        "description": "Which ever domain you choose, ensure that your certificates in the KeyVault Match"
      }
    },
    "vmWindowsOSVersion": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Datacenter"
      ]
    },
    "numberOfInstancesSQLServer": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 20,
      "metadata": {
        "description": "Number of SQL Server VMs to deploy"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Auto-generated container in staging storage account to receive post-build staging folder upload"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "Auto-generated token to access artifactsLocation"
      }
    },
    "vaultName": {
      "type": "string",
      "defaultValue": "kvcontosoeastus2",
      "metadata": {
        "description": "Name of the KeyVault, should choose keyvault in the same region as the deployment"
      },
      "allowedValues": [
        "kvcontosoeastus2",
        "kvcontosoeastus"
      ]
    },
    "vaultResourceGroup": {
      "type": "string",
      "defaultValue": "rgGlobal",
      "metadata": {
        "description": "Resource Group of the KeyVault"
      }
    },
    "certificateUrl": {
      "type": "string",
      "defaultValue": "https://kvcontosoeastus2.vault.azure.net:443/secrets/MultiDomainwildcard/07534e07585c4f6ba3ffd1769af55d01",
      "metadata": {
        "description": "Url of the certificate with version in KeyVault e.g. https://testault.vault.azure.net/secrets/testcert/dsfsdffdsfdsfdsfdsfdsfdsdsffsd"
      }
    },
    "certificateThumbprint": {
      "type": "string",
      "defaultValue": "78F957B6738273FA67C9756944E52FA0C1AAF307",
      "metadata": {
        "description": "Thee ThumbPrint of the certificate in KeyVault that will be used on the Web Servers"
      }
    },
    "WildcardCertBase64": {
      "type": "securestring"
    },
    "DSCUpdateTagVersion": {
      "type": "string",
      "defaultValue": "1.0",
      "metadata": {
        "description": "This value must be changed from a previous deployment to ensure the DSC extensions will re-run"
      }
    },
    "StorageAccountKeySource": {
      "type": "securestring",
      "metadata": {
        "description": "Used for copying source files to DSC from Azure Files storage"
      }
    },
    "OMSWorkspaceId": {
      "type": "securestring"
    },
    "OMSKey": {
      "type": "securestring"
    }
  },
  "variables": {
    // Global  BRWDev101
    "Deployment": "[concat(parameters('Prefix'),parameters('Environment'),parameters('DeploymentID'))]",

    // saBRWDev101midtier
    // sabrwdev101midtier
    "saName": "[toLower(concat('sa', variables('Deployment'),'database'))]",

    // Availability set
    "asName": "[concat('as', variables('Deployment'),'-DataBase')]",

    // Network
    "snPrefix": "10.0.0.0/16",

    // snMSFTDev10-BE
    "snName02": "[concat('sn', variables('Deployment'),'-BE')]",
    "snName02Prefix": "10.0.1.0/24",

    // Update these later to reference a VNet in alternate subscription or resourceGroup
    // subscriptionId
    "subscriptionId": "[subscription().subscriptionId]",
    // rgName
    "resourceGroupName": "[resourceGroup().name]",

    // Note if the deployment is into a VNET in a different subscription or resource group, use the variable VNetID instead
    "VNetID": "[resourceId(variables('subscriptionId'),variables('ResourceGroupName'), 'Microsoft.Network/VirtualNetworks', concat('vn',Variables('Deployment')))]",
    "SubnetRefBE": "[concat(variables('VNetID'), '/subnets/', variables('snName02'))]",

    // VM Global
    "vmSize": "Standard_D2_v2",
    "vmImagePublisher": "MicrosoftWindowsServer",
    "vmImageOffer": "WindowsServer",
    "vmStorageContainerName": "vhds",

    "Domain": "[split(parameters('vmDomainName'),'.')[0]]",

    // DC1
    //  vmBRWDev01DC1
    //  vmBRWDev02DC1
    "DC1PrivateIPAddress": "10.0.0.10",

    // DC2
    "DC2PrivateIPAddress": "10.0.0.11",

    //DSC
    "DSCArchiveFolder": "DSC",
    "DSCSQLxArchiveFileName": "DSCSQLx.zip",

    //"ConfigDataFileName": "ConfigurationData.psd1",
    //"ConfigData": "[concat(parameters('_artifactsLocation'), '/', variables('DSCArchiveFolder'), '/', variables('ConfigDataFileName'))]",

    "ConfigDataFileNameSQL": [ "ConfigurationDataSQL1.psd1", "ConfigurationDataSQLx.psd1", "ConfigurationDataSQLx.psd1", "ConfigurationDataSQLx.psd1" ],
    "ConfigDataSQL": "[concat(parameters('_artifactsLocation'), '/', variables('DSCArchiveFolder'), '/')]",

    //Nested Templates
    "NestedTemplateFolder": "nestedtemplates"

  },
  "resources": [
    {
      "name": "[variables('saName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "saName"
      },
      "properties": {
        "accountType": "[parameters('vmStorageAccountType')]"
      }
    },
    {
      "name": "[variables('asName')]",
      "type": "Microsoft.Compute/availabilitySets",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "availabilitySet"
      },
      "properties": {
        "platformUpdateDomainCount": 5,
        "platformFaultDomainCount": 3
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "name": "[concat('NIC_vmSQL', copyIndex(1))]",
      "copy": {
        "name": "nicLoop",
        "count": "[parameters('numberOfInstancesSQLServer')]"
      },
      "dependsOn": [
        // Do not include dependencies in other deployments
        //"[variables('VnetID')]"
        "[concat('Microsoft.Network/publicIPAddresses/', concat('PublicIP_vmSQL', copyIndex(1)))]"
      ],
      "tags": {
        "displayName": "vmSQLX_NIC"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('SubnetRefBE')]"
              },
              "publicIPAddress": {
                "id": "[resourceId( 'Microsoft.Network/publicIPAddresses', concat('PublicIP_vmSQL', copyIndex(1)) )]"

              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "name": "[concat('PublicIP_vmSQL', copyIndex(1))]",
      "copy": {
        "name": "PublicIPLoop",
        "count": "[parameters('numberOfInstancesSQLServer')]"
      },

      "dependsOn": [],
      "tags": {
        "displayName": "vmSQLx_PublicIP"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[toLower( concat(variables('Domain'),'vm', variables('Deployment'), 'SQL' ,copyIndex(1) ) ) ]"
        }
      }
    },
    // SQL VM Loop
    {
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "name": "[concat('vm', variables('Deployment'), 'SQL' ,copyIndex(1))]",
      "copy": {
        "name": "vmLoop",
        "count": "[parameters('numberOfInstancesSQLServer')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', concat('PublicIP_vmSQL', copyIndex(1)))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('saName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', concat('NIC_vmSQL', copyIndex(1)))]"
      ],
      "tags": {
        "displayName": "vmSQLX",
        "Environment": "[parameters('Environment')]"
      },
      "properties": {
        "properties": {
          "availabilitySet": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('asName'))]"
          },
          "hardwareProfile": {
            "vmSize": "[variables('vmSize')]"
          },
          "osProfile": {
            "computerName": "[concat('SQL', copyIndex(1))]",
            "adminUsername": "[parameters('vmAdminUsername')]",
            "adminPassword": "[parameters('vmAdminPassword')]",
            "secrets": [
              {
                "sourceVault": {
                  "id": "[resourceId(parameters('vaultResourceGroup'), 'Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                },
                "vaultCertificates": [
                  {
                    "certificateUrl": "[parameters('certificateUrl')]",
                    "certificateStore": "My"
                  },
                  {
                    "certificateUrl": "[parameters('certificateUrl')]",
                    "certificateStore": "Root"
                  },
                  {
                    "certificateUrl": "[parameters('certificateUrl')]",
                    "certificateStore": "CA"
                  }
                ]
              }
            ]
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[variables('vmImagePublisher')]",
              "offer": "[variables('vmImageOffer')]",
              "sku": "[parameters('vmWindowsOSVersion')]",
              "version": "latest"
            },
            "osDisk": {
              "name": "[concat('SQL', copyIndex(1), '_vmosDisk')]",
              "vhd": {
                "uri": "[concat('http://', variables('saName'), '.blob.core.windows.net/', variables('vmStorageContainerName'), '/', 'SQL', copyIndex(1), '_vmOsDisk', '.vhd')]"
              },
              "caching": "ReadWrite",
              "createOption": "FromImage"
            },
            "dataDisks": [
              {
                "name": "[concat('SQL', copyIndex(1), '_vmDataDisk0')]",
                "lun": 0,
                "vhd": {
                  "uri": "[concat('http://', variables('saName'), '.blob.core.windows.net/', variables('vmStorageContainerName'), '/', 'SQL', copyIndex(1), '_vmDataDisk0', '.vhd')]"
                },
                "caching": "ReadWrite",
                "diskSizeGB": "1023",
                "createOption": "Empty"
              },
              {
                "name": "[concat('SQL', copyIndex(1), '_vmDataDisk1')]",
                "lun": 1,
                "vhd": {
                  "uri": "[concat('http://', variables('saName'), '.blob.core.windows.net/', variables('vmStorageContainerName'), '/', 'SQL', copyIndex(1), '_vmDataDisk1', '.vhd')]"
                },
                "caching": "ReadWrite",
                "diskSizeGB": "1023",
                "createOption": "Empty"
              },
              {
                "name": "[concat('SQL', copyIndex(1), '_vmDataDisk2')]",
                "lun": 2,
                "vhd": {
                  "uri": "[concat('http://', variables('saName'), '.blob.core.windows.net/', variables('vmStorageContainerName'), '/', 'SQL', copyIndex(1), '_vmDataDisk2', '.vhd')]"
                },
                "caching": "ReadWrite",
                "diskSizeGB": "1023",
                "createOption": "Empty"
              },
              {
                "name": "[concat('SQL', copyIndex(1), '_vmDataDisk3')]",
                "lun": 3,
                "vhd": {
                  "uri": "[concat('http://', variables('saName'), '.blob.core.windows.net/', variables('vmStorageContainerName'), '/', 'SQL', copyIndex(1), '_vmDataDisk3', '.vhd')]"
                },
                "caching": "ReadWrite",
                "diskSizeGB": "1023",
                "createOption": "Empty"
              }
            ]
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('NIC_vmSQL', copyIndex(1)))]"
              }
            ]
          }
        },
        "resources": [
          {
            "name": "[concat('vm', variables('Deployment'), 'SQL' ,copyIndex(1), '_DSC')]",
            "type": "extensions",
            "location": "[resourceGroup().location]",
            "apiVersion": "2015-06-15",
            "dependsOn": [
              "[resourceId('Microsoft.Compute/virtualMachines', concat('vm', variables('Deployment'), 'SQL' ,copyIndex(1)))]"
            ],
            "tags": {
              "displayName": "dscSQLx"
            },
            "properties": {
              "publisher": "Microsoft.Powershell",
              "type": "DSC",
              "typeHandlerVersion": "2.22",
              "autoUpgradeMinorVersion": true,
              "forceUpdateTag": "[parameters('DSCUpdateTagVersion')]",
              "settings": {
                "wmfVersion": "latest",
                "configuration": {
                  "url": "[concat(parameters('_artifactsLocation'), '/', variables('DSCArchiveFolder'), '/', variables('DSCSQLxArchiveFileName'))]",
                  "script": "DSCSQLx.ps1",
                  "function": "Main"
                },
                "configurationArguments": {
                  "DomainName": "[parameters('vmDomainName')]",
                  "Thumbprint": "[parameters('certificateThumbprint')]",
                  "StorageAccountKeySource": "[parameters('StorageAccountKeySource')]"
                },
                "configurationData": {
                  "url": "[concat(variables('ConfigDataSQL'),variables('ConfigDataFileNameSQL')[copyIndex(0)])]"
                }
              },
              "protectedSettings": {
                "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
                "configurationDataUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
                "configurationArguments": {
                  "AdminCreds": {
                    "UserName": "[parameters('vmAdminUserName')]",
                    "Password": "[parameters('vmAdminPassword')]"
                  }
                }
              }
            }
          }
        ]
      } //,
      //  {
      //    "apiVersion": "2015-06-15",
      //    "type": "Microsoft.Network/networkInterfaces",
      //    "location": "[resourceGroup().location]",
      //    "name": "[concat('NIC_vmMS', copyIndex(1))]",
      //    "copy": {
      //      "name": "nicLoop",
      //      "count": "[parameters('numberOfInstancesMemberServer')]"
      //    },
      //    "dependsOn": [
      //      // Do not include dependencies in other deployments
      //      //"[variables('VnetID')]",
      //      "[concat('Microsoft.Network/publicIPAddresses/', concat('PublicIP_vmMS', copyIndex(1)))]"
      //    ],
      //    "tags": {
      //      "displayName": "vmMSX_NIC"
      //    },
      //    "properties": {
      //      "ipConfigurations": [
      //        {
      //          "name": "ipconfig1",
      //          "properties": {
      //            "privateIPAllocationMethod": "Dynamic",
      //            "subnet": {
      //              "id": "[variables('SubnetRefBE')]"
      //            },
      //            "publicIPAddress": {
      //              "id": "[resourceId( 'Microsoft.Network/publicIPAddresses', concat('PublicIP_vmMS', copyIndex(1)) )]"
      //
      //            }
      //          }
      //        }
      //      ]
      //    }
      //  }
  ],
  "outputs": {
    //"MT1-fqdn": {
    //  "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses','PublicIP_vmMT1'), '2016-07-01').dnsSettings.fqdn]",
    //  "type": "string"
    //}
  }
}
