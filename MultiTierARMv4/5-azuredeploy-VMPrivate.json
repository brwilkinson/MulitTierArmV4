{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    // Global
    "DeploymentID": {
      "type": "string",
      "defaultValue": "101",
      "minLength": 2
    },
    "Prefix": {
      "type": "string",
      "defaultValue": "MSFT",
      "minLength": 1
    },
    "Environment": {
      "type": "string",
      "defaultValue": "Dev",
      "allowedValues": [
        "Dev",
        "Test",
        "Prod"
      ]
    },
    "vmStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ]
    },
    // Used for all VM's
    "vmAdminUserName": {
      "type": "string",
      "defaultValue": "brw",
      "minLength": 3
    },
    // Used for all VM's, local and Domain Admin Password
    "vmAdminPassword": {
      "type": "securestring"
    },
    "vmDomainName": {
      "type": "string",
      "defaultValue": "Contoso.com",
      "allowedValues": [
        "Contoso.com",
        "AlpineSkiHouse.com",
        "Fabrikam.com",
        "TreyResearch.net"
      ],
      "metadata": {
        "description": "Which ever domain you choose, ensure that your certificates in the KeyVault Match"
      }
    },
    "vmWindowsOSVersion": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Datacenter"
      ]
    },
    "numberOfInstancesSQLServer": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 20,
      "metadata": {
        "description": "Number of SQL Server VMs to deploy"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Auto-generated container in staging storage account to receive post-build staging folder upload"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "Auto-generated token to access artifactsLocation"
      }
    },
    "vaultName": {
      "type": "string",
      "defaultValue": "kvcontosoeastus2",
      "metadata": {
        "description": "Name of the KeyVault, should choose keyvault in the same region as the deployment"
      },
      "allowedValues": [
        "kvcontosoeastus2",
        "kvcontosoeastus"
      ]
    },
    "vaultResourceGroup": {
      "type": "string",
      "defaultValue": "rgGlobal",
      "metadata": {
        "description": "Resource Group of the KeyVault"
      }
    },
    "certificateUrl": {
      "type": "string",
      "defaultValue": "https://kvcontosoeastus2.vault.azure.net:443/secrets/MultiDomainwildcard/07534e07585c4f6ba3ffd1769af55d01",
      "metadata": {
        "description": "Url of the certificate with version in KeyVault e.g. https://testault.vault.azure.net/secrets/testcert/dsfsdffdsfdsfdsfdsfdsfdsdsffsd"
      }
    },
    "certificateThumbprint": {
      "type": "string",
      "defaultValue": "78F957B6738273FA67C9756944E52FA0C1AAF307",
      "metadata": {
        "description": "Thee ThumbPrint of the certificate in KeyVault that will be used on the Web Servers"
      }
    },
    "WildcardCertBase64": {
      "type": "securestring"
    },
    "DSCUpdateTagVersion": {
      "type": "string",
      "defaultValue": "1.0",
      "metadata": {
        "description": "This value must be changed from a previous deployment to ensure the DSC extensions will re-run"
      }
    },
    "StorageAccountKeySource": {
      "type": "securestring",
      "metadata": {
        "description": "Used for copying source files to DSC from Azure Files storage"
      }
    },
    "OMSWorkspaceId": {
      "type": "securestring"
    },
    "OMSKey": {
      "type": "securestring"
    }
  },
  "variables": {
    // Global  BRWDev101
    "Deployment": "[concat(parameters('Prefix'),parameters('Environment'),parameters('DeploymentID'))]",

    // Update these later to reference a VNet in alternate subscription or resourceGroup
    // subscriptionId
    "subscriptionId": "[subscription().subscriptionId]",
    // rgName
    "resourceGroupName": "[resourceGroup().name]",

    "AppRoles": [
        {"Role" : "WebFE" },
        {"Role" : "WebMT" }
    ],

    "AppServers": [
            {"VMName":"WebFE01","Role":"WebFE","VMSize":"Standard_DS4","Subnet":"FE", "StorageType" : "Standard_LRS"},
            {"VMName":"WebFE02","Role":"WebFE","VMSize":"Standard_DS4","Subnet":"FE", "StorageType" : "Standard_LRS"},
            
            {"VMName":"WebMT01","Role":"WebMT","VMSize":"Standard_DS12","Subnet":"MT", "StorageType" : "Standard_LRS"},
            {"VMName":"WebMT02","Role":"WebMT","VMSize":"Standard_DS12","Subnet":"MT", "StorageType" : "Standard_LRS"}
      ],

    // Note if the deployment is into a VNET in a different subscription or resource group, use the variable VNetID instead
    "VNetID": "[resourceId(variables('subscriptionId'),variables('ResourceGroupName'), 'Microsoft.Network/VirtualNetworks', concat('vn',Variables('Deployment')))]",

    // VM Global
    //"vmSize": "Standard_D1",
    "vmImagePublisher": "MicrosoftWindowsServer",
    "vmImageOffer": "WindowsServer",

    //DSC
    "DSCArchiveFolder": "DSC",
    "DSCAppRolesFileName": "DSCAppTier.ps1",
    "DSCAppRolesFileNameArchive": "DSCAppTier.zip",

    "ConfigDataFileNameBase": "ConfigurationData.psd1",
    "ConfigDataPath": "[concat(parameters('_artifactsLocation'), '/', variables('DSCArchiveFolder'), '/')]",

    //Nested Templates
    "NestedTemplateFolder": "nestedtemplates"

  },
  "resources": [
    {
      "name": "[concat('as',variables('Deployment'),'-',variables('AppRoles')[copyIndex()].Role)]",
      "type": "Microsoft.Compute/availabilitySets",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-04-30-preview",
      "dependsOn": [],
      "sku": {
        "name": "Aligned"
      },
      "copy": {
        "name": "asLoop",
        "count": "[length( variables('AppRoles') )]"
      },
      "tags": {
        "displayName": "availabilitySet"
      },
      "properties": {
        "platformUpdateDomainCount": 5,
        "platformFaultDomainCount": 3
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "name": "[concat('NIC_vm',variables('AppServers')[copyIndex(0)].VMName)]",
      "copy": {
        "name": "nicLoop",
        "count": "[length( variables('AppServers') )]"
      },
      "dependsOn": [
        // Do not include dependencies in other deployments
        //"[variables('VnetID')]",
        //"[concat('PublicIP_vm',variables('AppServers')[copyIndex(0)].VMName)]"
      ],
      "tags": {
        "displayName": "vmMTX_NIC"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(variables('VNetID'), '/subnets/','sn',variables('Deployment'),'-',variables('AppServers')[copyIndex(0)].Subnet)]"
              }//,
             // "publicIPAddress": {
             //   "id": "[resourceId( 'Microsoft.Network/publicIPAddresses', concat('PublicIP_vm',variables('AppServers')[copyIndex(0)].VMName) )]"
             //
             // }
            }
          }
        ]
      }
    },
    // MidTier VM Loop
    {
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-04-30-preview",
      "name": "[concat('vm', variables('Deployment'), variables('AppServers')[copyIndex(0)].VMName)]",
      "copy": {
        "name": "vmLoop",
        "count": "[length(variables('AppServers'))]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', concat('NIC_vm',variables('AppServers')[copyIndex(0)].VMName))]",
        "[concat('Microsoft.Compute/availabilitySets/', concat('as',variables('Deployment'), '-',variables('AppServers')[copyIndex(0)].Role))]"
      ],
      "tags": {
        "displayName": "vmMTX",
        "Environment": "[parameters('Environment')]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat('as',variables('Deployment'), '-',variables('AppServers')[copyIndex(0)].Role))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('AppServers')[copyIndex(0)].VMSize]"
        },
        "osProfile": {
          "computerName": "[variables('AppServers')[copyIndex(0)].VMName]",
          "adminUsername": "[parameters('vmAdminUsername')]",
          "adminPassword": "[parameters('vmAdminPassword')]",
          "secrets": [
            {
              "sourceVault": {
                "id": "[resourceId(parameters('vaultResourceGroup'), 'Microsoft.KeyVault/vaults', parameters('vaultName'))]"
              },
              "vaultCertificates": [
                {
                  "certificateUrl": "[parameters('certificateUrl')]",
                  "certificateStore": "My"
                },
                {
                  "certificateUrl": "[parameters('certificateUrl')]",
                  "certificateStore": "Root"
                },
                {
                  "certificateUrl": "[parameters('certificateUrl')]",
                  "certificateStore": "CA"
                }
              ]
            }
          ]
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmImagePublisher')]",
            "offer": "[variables('vmImageOffer')]",
            "sku": "[parameters('vmWindowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('AppServers')[copyIndex(0)].VMName, '_vmosDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[variables('AppServers')[copyIndex(0)].StorageType]"
            }
          },
          "dataDisks": [
            {
              "name": "[concat(variables('AppServers')[copyIndex(0)].VMName, '_vmDataDisk')]",
              "lun": 0,
              "caching": "ReadWrite",
              "diskSizeGB": "127",
              "createOption": "Empty",
              "managedDisk": {
                "storageAccountType": "[variables('AppServers')[copyIndex(0)].StorageType]"
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('NIC_vm',variables('AppServers')[copyIndex(0)].VMName))]"
            }
          ]
        }
      },
      "resources": [
        {
          "name": "[concat('vm', variables('AppServers')[copyIndex(0)].VMName, '_DSC')]",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat('vm', variables('Deployment'), variables('AppServers')[copyIndex(0)].VMName))]"
          ],
          "tags": {
            "displayName": "dscMTx"
          },
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.22",
            "autoUpgradeMinorVersion": true,
            "forceUpdateTag": "[parameters('DSCUpdateTagVersion')]",
            "settings": {
              "wmfVersion": "latest",
              "configuration": {
                "url": "[concat(parameters('_artifactsLocation'), '/', variables('DSCArchiveFolder'), '/', variables('DSCAppRolesFileNameArchive'))]",
                "script": "[variables('DSCAppRolesFileName')]",
                "function": "Main"
              },
              "configurationData": {
                "url": "[concat(variables('ConfigDataPath'),variables('AppServers')[copyIndex(0)].Role,'-',variables('ConfigDataFileNameBase'))]"
              }
            },
            "configurationArguments": {
              "DomainName": "[parameters('vmDomainName')]",
              "Thumbprint": "[parameters('certificateThumbprint')]",
              "StorageAccountKeySource": "[parameters('StorageAccountKeySource')]"
            },
            "protectedSettings": {
              "configurationArguments": {
                "AdminCreds": {
                  "UserName": "[parameters('vmAdminUserName')]",
                  "Password": "[parameters('vmAdminPassword')]"
                }
              },
              "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
              "configurationDataUrlSasToken": "[parameters('_artifactsLocationSasToken')]"
            }
          }
        },
        {
          "type": "extensions",
          "name": "OMS.Monitoring",
          "apiVersion": "2015-06-15",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat('vm', variables('Deployment'), variables('AppServers')[copyIndex(0)].VMName))]"
          ],
          "properties": {
            "publisher": "Microsoft.EnterpriseCloud.Monitoring",
            "type": "MicrosoftMonitoringAgent",
            "typeHandlerVersion": "1.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "workspaceId": "[parameters('OMSWorkspaceId')]"
            },
            "protectedSettings": {
              "workspaceKey": "[parameters('OMSKey')]"
            }
          }
        }
      ]
    }
  ],
  "outputs": {
    //"MT1-fqdn": {
    //  "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses','PublicIP_vm',variables('AppServers')[0].VMName), '2016-07-01').dnsSettings.fqdn]",
    //  "type": "string"
    //}
  }
}
