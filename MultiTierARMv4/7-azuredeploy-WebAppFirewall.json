{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    // Global
    "DeploymentID": {
      "type": "string",
      "defaultValue": "101",
      "minLength": 2
    },
    "Prefix": {
      "type": "string",
      "defaultValue": "MSFT",
      "minLength": 1
    },
    "Environment": {
      "type": "string",
      "defaultValue": "Dev",
      "allowedValues": [
        "Dev",
        "Test",
        "Prod"
      ]
    },
    "vmStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS"
      ]
    },
    // Used for all VM's
    "vmAdminUserName": {
      "type": "string",
      "defaultValue": "localadmin",
      "minLength": 3
    },
    // Used for all VM's, local and Domain Admin Password
    "vmAdminPassword": {
      "type": "securestring"
    },
    "vmDomainName": {
      "type": "string",
      "defaultValue": "Contoso.com",
      "allowedValues": [
        "Contoso.com",
        "AlpineSkiHouse.com",
        "Fabrikam.com",
        "TreyResearch.net"
      ],
      "metadata": {
        "description": "Which ever domain you choose, ensure that your certificates in the KeyVault Match"
      }
    },
    "vmWindowsOSVersion": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Datacenter"
      ]
    },
    "numberOfInstancesSQLServer": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 20,
      "metadata": {
        "description": "Number of SQL Server VMs to deploy"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Auto-generated container in staging storage account to receive post-build staging folder upload"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "Auto-generated token to access artifactsLocation"
      }
    },
    "vaultName": {
      "type": "string",
      "defaultValue": "kvcontosoeastus2",
      "metadata": {
        "description": "Name of the KeyVault, should choose keyvault in the same region as the deployment"
      },
      "allowedValues": [
        "kvcontosoeastus2",
        "kvcontosoeastus"
      ]
    },
    "vaultResourceGroup": {
      "type": "string",
      "defaultValue": "rgGlobal",
      "metadata": {
        "description": "Resource Group of the KeyVault"
      }
    },
    "certificateUrl": {
      "type": "string",
      "defaultValue": "https://kvcontosoeastus2.vault.azure.net:443/secrets/MultiDomainwildcard/07534e07585c4f6ba3ffd1769af55d01",
      "metadata": {
        "description": "Url of the certificate with version in KeyVault e.g. https://testault.vault.azure.net/secrets/testcert/dsfsdffdsfdsfdsfdsfdsfdsdsffsd"
      }
    },
    "certificateThumbprint": {
      "type": "string",
      "defaultValue": "78F957B6738273FA67C9756944E52FA0C1AAF307",
      "metadata": {
        "description": "Thee ThumbPrint of the certificate in KeyVault that will be used on the Web Servers"
      }
    },
    "WildcardCertBase64": {
      "type": "securestring"
    },
    "DSCUpdateTagVersion": {
      "type": "string",
      "defaultValue": "1.0",
      "metadata": {
        "description": "This value must be changed from a previous deployment to ensure the DSC extensions will re-run"
      }
    },
    "StorageAccountKeySource": {
      "type": "securestring",
      "metadata": {
        "description": "Used for copying source files to DSC from Azure Files storage"
      }
    },
    "OMSWorkspaceId": {
      "type": "securestring"
    },
    "OMSKey": {
      "type": "securestring"
    }
  },
  "variables": {
    // Global  BRWDev101
    "Deployment": "[concat(parameters('Prefix'),parameters('Environment'),parameters('DeploymentID'))]",

    // Update these later to reference a VNet in alternate subscription or resourceGroup
    // subscriptionId
    "subscriptionId": "[subscription().subscriptionId]",
    // rgName
    "resourceGroupName": "[resourceGroup().name]",

    // Note if the deployment is into a VNET in a different subscription or resource group, this needs to be updated.
    "VNetID": "[resourceId(variables('subscriptionId'),variables('ResourceGroupName'), 'Microsoft.Network/VirtualNetworks', concat('vn',Variables('Deployment')))]",
    "snName06": "[concat('sn', variables('Deployment'),'-Gateway')]",
    "SubnetRefGW": "[concat(variables('VNetID'), '/subnets/', variables('snName06'))]",

    "WAFInfo": [
      {
        "WAFName": "WebMT",
        "WAFEnabled": true,
        "WAFMode": "Detection",
        "WAFSize": "WAF_Medium",
        "WAFCapacity": 2,
        "FQDNs": [
          { "fqdn": "WebMT01.Contoso.com" },
          { "fqdn": "WebMT02.Contoso.com" }
        ]
      },
      {
        "WAFName": "WebFE",
        "WAFEnabled": true,
        "WAFMode": "Detection",
        "WAFSize": "WAF_Medium",
        "WAFCapacity": 2,
        "FQDNs": [
          { "fqdn": "WebFEO1.Contoso.com" },
          { "fqdn": "WebFEO2.Contoso.com" }
        ]
      }
    ]
  },
  "resources": [
    {
      "apiVersion": "2017-03-01",
      "name": "[concat('WAF_', variables('Deployment'),'_',variables('WAFInfo')[copyIndex(0)].WAFName)]",
      "type": "Microsoft.Network/applicationGateways",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "WAFLoop",
        "count": "[length( variables('WAFInfo') )]"
      },
      "tags": {
        "displayName": "WAF"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', concat('PublicIP_WAF_',variables('WAFInfo')[copyIndex(0)].WAFName))]"
      ],
      "properties": {
        "sku": {
          "name": "[variables('WAFInfo')[copyIndex(0)].WAFSize]",
          "tier": "WAF",
          "capacity": "[variables('WAFInfo')[copyIndex(0)].WAFCapacity]"
        },
        "authenticationCertificates": [
          {
            "properties": {
              "data": "MIIDYDCCAkigAwIBAgIQWCrxL82dyJpF0u4uifepezANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA0qLmNvbnRvc28uY29tMB4XDTE3MDUwNjE1MDAxMVoXDTIyMDUwNjE1MTAxMVowGDEWMBQGA1UEAwwNKi5jb250b3NvLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMI/CWpAhEyf1crhHVa8fPBwUod7JTc8PicSu9Qok6PotJR14+C3NRw7zzMSTpRNbD8xeIyBoazJwllbNnLJB5Fup12G6BT2AkfchwN/OPF5dqjHB5GRIh5F/tGDijGLE2fgvfGsJTLaMU215PIs8MJO0fnDg7Zk8jy4dSbMyQTDyq33qpUqgNWieqiZ9mFemD4LXP2LcgoMJL6OxtwEul8LRzXoHwk0guutfNcnoZd/v1nw2o5u2/vhXJ2qvMbrWn2LMYCnlADxgfVxJS5ouwKeZbdZ5SrJxuv743co6dEkEGruksokv8dgWRpFuTzpomG0McrW3ePwLqMet5Dlpe0CAwEAAaOBpTCBojAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMFIGA1UdEQRLMEmCDSouY29udG9zby5jb22CFCouQWxwaW5lU2tpSG91c2UuY29tgg4qLkZhYnJpa2FtLmNvbYISKi5UcmV5UmVzZWFyY2gubmV0MB0GA1UdDgQWBBR8UMMYWKMkoW/6y31IHUVtvnLnqTANBgkqhkiG9w0BAQsFAAOCAQEAl0lF+TE0ZbnaxOmPdK7d2k/lnk/uTC5vvnSjcHPzr0rIKaQ3a1a23f7v3KxxfU2iUHn1ZhlwKaNPW/me+v4P1IIB/51lka8VT1bV9yhjb67CLERWRbN/JT4T+0jenaKuT2NDaeeiOGeJNYgGbDhPInkjgv2fznkB8ZNB8Fo7mv0dxfW2cWRRaQHRzEKsK0VczahWQiH+PqDq7rD/AWgF2jn0JIF6AeFK1prERcr2XTLUPCDVHJ1oRckDJdA9wfjYFcsQy2n29u0NdaG1XRZmYSmvst68JKTTWEYHPi7TULo9yUdeL7YGARpjLg58td2ZATv2isG7bkxnbQZWghyDUA=="
            },
            "name": "MultiDomainwildcardBase64Public"
          }
        ],
        "sslCertificates": [
          {
            "properties": {
              "data": "[parameters('WildcardCertBase64')]",
              "password": "[parameters('vmAdminPassword')]",
              "publicCertData": "MIIDYDCCAkigAwIBAgIQWCrxL82dyJpF0u4uifepezANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA0qLmNvbnRvc28uY29tMB4XDTE3MDUwNjE1MDAxMVoXDTIyMDUwNjE1MTAxMVowGDEWMBQGA1UEAwwNKi5jb250b3NvLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMI/CWpAhEyf1crhHVa8fPBwUod7JTc8PicSu9Qok6PotJR14+C3NRw7zzMSTpRNbD8xeIyBoazJwllbNnLJB5Fup12G6BT2AkfchwN/OPF5dqjHB5GRIh5F/tGDijGLE2fgvfGsJTLaMU215PIs8MJO0fnDg7Zk8jy4dSbMyQTDyq33qpUqgNWieqiZ9mFemD4LXP2LcgoMJL6OxtwEul8LRzXoHwk0guutfNcnoZd/v1nw2o5u2/vhXJ2qvMbrWn2LMYCnlADxgfVxJS5ouwKeZbdZ5SrJxuv743co6dEkEGruksokv8dgWRpFuTzpomG0McrW3ePwLqMet5Dlpe0CAwEAAaOBpTCBojAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMFIGA1UdEQRLMEmCDSouY29udG9zby5jb22CFCouQWxwaW5lU2tpSG91c2UuY29tgg4qLkZhYnJpa2FtLmNvbYISKi5UcmV5UmVzZWFyY2gubmV0MB0GA1UdDgQWBBR8UMMYWKMkoW/6y31IHUVtvnLnqTANBgkqhkiG9w0BAQsFAAOCAQEAl0lF+TE0ZbnaxOmPdK7d2k/lnk/uTC5vvnSjcHPzr0rIKaQ3a1a23f7v3KxxfU2iUHn1ZhlwKaNPW/me+v4P1IIB/51lka8VT1bV9yhjb67CLERWRbN/JT4T+0jenaKuT2NDaeeiOGeJNYgGbDhPInkjgv2fznkB8ZNB8Fo7mv0dxfW2cWRRaQHRzEKsK0VczahWQiH+PqDq7rD/AWgF2jn0JIF6AeFK1prERcr2XTLUPCDVHJ1oRckDJdA9wfjYFcsQy2n29u0NdaG1XRZmYSmvst68JKTTWEYHPi7TULo9yUdeL7YGARpjLg58td2ZATv2isG7bkxnbQZWghyDUA=="
            },
            "name": "MultiDomainwildcard"
          }
        ],
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[variables('subnetRefGW')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGatewayFrontendIP",
            "properties": {
              "PublicIPAddress": {

                "id": "[concat(resourceId('Microsoft.Network/publicIPAddresses/', concat('PublicIP_WAF_', variables('WAFInfo')[copyIndex(0)].WAFName)) )]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "appGatewayFrontendPort80",
            "properties": {
              "Port": 80
            }
          },
          {
            "name": "appGatewayFrontendPort443",
            "properties": {
              "Port": 443

            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "appGatewayBackendPool",
            "properties": {
              "BackendAddresses": "[take(variables('WAFInfo')[copyIndex(0)].FQDNs, length(variables('WAFInfo')[copyIndex(0)].FQDNs))]"
            }
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "appGatewayBackendHttpSettings80",
            "properties": {
              "Port": 80,
              "Protocol": "Http",
              "CookieBasedAffinity": "Disabled",
              "RequestTimeout": 600
            }

          },
          {
            "name": "appGatewayBackendHttpSettings443",
            "properties": {
              "Port": 443,
              "Protocol": "Https",
              "CookieBasedAffinity": "Disabled",
              "RequestTimeout": 600,
              "authenticationCertificates": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat('WAF_', variables('Deployment'),'_', variables('WAFInfo')[copyIndex(0)].WAFName)),'/authenticationCertificates/MultiDomainwildcardBase64Public' )]"
                }
              ]
            }

          }
        ],
        "httpListeners": [
          {
            "name": "appGatewayHttpListener80",
            "properties": {
              "FrontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat('WAF_', variables('Deployment'),'_', variables('WAFInfo')[copyIndex(0)].WAFName)),'/frontendIPConfigurations/appGatewayFrontendIP' )]"
              },
              "FrontendPort": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat('WAF_', variables('Deployment'),'_', variables('WAFInfo')[copyIndex(0)].WAFName)),'/frontendPorts/appGatewayFrontendPort80' )]"
              },
              "Protocol": "Http"
            }
          },
          {
            "name": "appGatewayHttpListener443",
            "properties": {
              "FrontendIPConfiguration": {

                "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat('WAF_', variables('Deployment'),'_', variables('WAFInfo')[copyIndex(0)].WAFName)),'/frontendIPConfigurations/appGatewayFrontendIP' )]"
              },
              "FrontendPort": {

                "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat('WAF_', variables('Deployment'),'_', variables('WAFInfo')[copyIndex(0)].WAFName)),'/frontendPorts/appGatewayFrontendPort443' )]"
              },
              "Protocol": "Https",

              "SslCertificate": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat('WAF_', variables('Deployment'),'_', variables('WAFInfo')[copyIndex(0)].WAFName)),'/sslCertificates/MultiDomainwildcard' )]"
              }
            }
          }
        ],
        "requestRoutingRules": [
          {
            "Name": "rule80",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat('WAF_', variables('Deployment'),'_', variables('WAFInfo')[copyIndex(0)].WAFName)),'/httpListeners/appGatewayHttpListener80' )]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat('WAF_', variables('Deployment'),'_', variables('WAFInfo')[copyIndex(0)].WAFName)),'/backendAddressPools/appGatewayBackendPool' )]"
              },
              "backendHttpSettings": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat('WAF_', variables('Deployment'),'_', variables('WAFInfo')[copyIndex(0)].WAFName)),'/backendHttpSettingsCollection/appGatewayBackendHttpSettings80' )]"
              }
            }
          },
          {
            "Name": "rule443",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {

                "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat('WAF_', variables('Deployment'),'_', variables('WAFInfo')[copyIndex(0)].WAFName)),'/httpListeners/appGatewayHttpListener443' )]"
              },
              "backendAddressPool": {

                "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat('WAF_', variables('Deployment'),'_', variables('WAFInfo')[copyIndex(0)].WAFName)),'/backendAddressPools/appGatewayBackendPool' )]"
              },
              "backendHttpSettings": {

                "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat('WAF_', variables('Deployment'),'_', variables('WAFInfo')[copyIndex(0)].WAFName)),'/backendHttpSettingsCollection/appGatewayBackendHttpSettings443' )]"
              }
            }
          }
        ],
        "webApplicationFirewallConfiguration": {
          "enabled": "[variables('WAFInfo')[copyIndex(0)].WAFEnabled]",
          "firewallMode": "[variables('WAFInfo')[copyIndex(0)].WAFMode]",
          "ruleSetType": "OWASP",
          "ruleSetVersion": "3.0",
          "disabledRuleGroups": []
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "name": "[concat('PublicIP_WAF_',variables('WAFInfo')[copyIndex(0)].WAFName)]",
      "copy": {
        "name": "PublicIPLoop",
        "count": "[length( variables('WAFInfo') )]"
      },

      "dependsOn": [],
      "tags": {
        "displayName": "WAF_PublicIP"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    }

  ],
  "outputs": {
    //"MT1-fqdn": {
    //  "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses','PublicIP_vmMT1'), '2016-07-01').dnsSettings.fqdn]",
    //  "type": "string"
    //}
  }
}
